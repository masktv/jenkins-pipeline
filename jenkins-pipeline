# Necessory plugin for jenkins 
1. cloudbees docker build and publish
2. docker api plugin
3. docker common plugin
4. docker plugin
5. github
6. kiubernetes plugin/ credential plugin
7. ssh agent
8. Credential plugin
9. Credential binding plugin
10. ssh build agent 
11. Pipeline stage view
12. aws credential 

..................................................................

To clone git Repo
  1. Generate a Personal Access Token
        Repo setting --> Developer settings --> Personal access token
  2. Add Credentials in Jenkins
        Manage Jenkins --> Manage Credentials --> Add Credentials --> username and password {Paste your GitHub personal access token and give it a unique ID}  (e.g., github-token).
  3. Create a Jenkins Pipeline Job
        
Script:   
pipeline {
    agent any 
    environment {
        GITHUB_CREDENTIALS = 'github-token' // Replace with your credentials ID
        GITHUB_REPO = 'https://github.com/username/repo.git' // Replace with your repository URL
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository using Git credentials
                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/main']], // Change to your default branch if necessary
                        userRemoteConfigs: [[
                            url: GITHUB_REPO,
                            credentialsId: GITHUB_CREDENTIALS
                        ]]
                    ])
                }
            }
        }
    }  
}


To Build docker image and push it g
  1. Add Docker Registry Credentials    
      Account settings --> generate a personal access token
  2. Add Docker Hub Credentials in Jenkins
      Manage Jenkins --> Manage Credentials --> Add Credentials-> Username with password {Enter your Docker Hub username and the personal access token as the password} (e.g.dockerhub-credentials)

Script:
pipeline {
    agent any 
    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials' // Replace with your Docker Hub credentials ID
        IMAGE_NAME = 'your-dockerhub-username/repo-name' // Change to your desired Docker image name
        DOCKER_REGISTRY = 'your-private-registry.com' // Optional If using a private registry
    }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build(IMAGE_NAME)
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub (or private registry)
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                        
                        // Push the Docker image
                        sh "docker push ${IMAGE_NAME}"
                    }
                }
            }
        }
    }
}
